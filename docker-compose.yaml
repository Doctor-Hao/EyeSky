version: '3'

services:
  postgres:
    image: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-database}
    ports:
      - 5432:5432
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres}']
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  # redis:
  #   image: redis
  #   ports:
  #     - 6379:6379
  #   restart: always

  nginx:
    build:
      context: web
      dockerfile: ../docker/web.Dockerfile
    ports:
      - '80:80' # Прокси порт для Nginx
    restart: always

  app:
    build:
      context: .
      dockerfile: ./docker/app.Dockerfile
    ports:
      - '8080:8080'
    depends_on:
      - redis
      - postgres
      - kafka
      - minio
    restart: always

  worker:
    build:
      context: .
      dockerfile: ./docker/worker.Dockerfile
    depends_on:
      # - redis
      - postgres
      - app
      - kafka
      - minio
    restart: always

  zookeeper:
    image: 'confluentinc/cp-zookeeper:7.0.1'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: always
    ports:
      - '2181:2181'

  kafka:
    image: 'confluentinc/cp-kafka:7.0.1'
    depends_on:
      - zookeeper
    restart: always
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ADVERTISED_HOST_NAME: kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    # volumes:
    #   - ./kafka-data:/var/lib/kafka/data

  kafka_init:
    image: 'confluentinc/cp-kafka:7.0.1'
    depends_on:
      - kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ADVERTISED_HOST_NAME: kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    entrypoint: >
      bash -c "
        # Ожидаем запуска Kafka
        while ! kafka-topics --bootstrap-server kafka:9092 --list; do
          echo 'Waiting for Kafka to be ready...';
          sleep 5;
        done;
        
        # Создаем топик после запуска
        if ! kafka-topics --bootstrap-server kafka:9092 --describe --topic frames > /dev/null 2>&1; then
          kafka-topics --create --topic frames --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1;
          echo 'Topic frames created';
        else
          echo 'Topic frames already exists';
        fi;

        # Проверяем и создаем топик 'healthcheck', если он не существует
        if ! kafka-topics --bootstrap-server kafka:9092 --describe --topic healthcheck > /dev/null 2>&1; then
          kafka-topics --create --topic healthcheck --bootstrap-server kafka:9092 --partitions 1 --replication-factor 1;
          echo 'Topic healthcheck created';
        else
          echo 'Topic healthcheck already exists';
        fi;
      "
    # volumes:
    #   - ./kafka-data:/var/lib/kafka/data

  minio:
    image: minio/minio:RELEASE.2024-10-13T13-34-11Z-cpuv1
    ports:
      - '9000:9000'
      - '9001:9001'
    restart: always
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    # volumes:
    #   - minio_data:/data

  minio_init:
    image: minio/minio:RELEASE.2024-10-13T13-34-11Z-cpuv1
    depends_on:
      - minio
    entrypoint: >
      bash -c "
        # Wait for MinIO server to start
        until /usr/bin/mc alias set minio http://minio:9000 minioadmin minioadmin; do
          echo 'Waiting for MinIO server...'
          sleep 2
        done

        # Check if the bucket exists, create it only if it doesn't
        if ! /usr/bin/mc ls minio/frames > /dev/null 2>&1; then
          /usr/bin/mc mb minio/frames
        fi

        # Set public policy for the frames bucket
        /usr/bin/mc anonymous set public minio/frames
      "
